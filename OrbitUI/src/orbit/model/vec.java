/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package orbit.model;

public class vec {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected vec(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(vec obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OrbitSimulatorJNI.delete_vec(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setX(double value) {
    OrbitSimulatorJNI.vec_x_set(swigCPtr, this, value);
  }

  public double getX() {
    return OrbitSimulatorJNI.vec_x_get(swigCPtr, this);
  }

  public void setY(double value) {
    OrbitSimulatorJNI.vec_y_set(swigCPtr, this, value);
  }

  public double getY() {
    return OrbitSimulatorJNI.vec_y_get(swigCPtr, this);
  }

  public void setZ(double value) {
    OrbitSimulatorJNI.vec_z_set(swigCPtr, this, value);
  }

  public double getZ() {
    return OrbitSimulatorJNI.vec_z_get(swigCPtr, this);
  }

  public double getScalar() {
    return OrbitSimulatorJNI.vec_getScalar(swigCPtr, this);
  }

  public vec multiplyWithDouble(double number) {
    return new vec(OrbitSimulatorJNI.vec_multiplyWithDouble(swigCPtr, this, number), true);
  }

  public vec rotate(quaternion orientationQuaternion) {
    return new vec(OrbitSimulatorJNI.vec_rotate(swigCPtr, this, quaternion.getCPtr(orientationQuaternion), orientationQuaternion), true);
  }

  public vec multiply(vec b) {
    return new vec(OrbitSimulatorJNI.vec_multiply(swigCPtr, this, vec.getCPtr(b), b), true);
  }

  public quaternion createQuaternion() {
    return new quaternion(OrbitSimulatorJNI.vec_createQuaternion(swigCPtr, this), true);
  }

  public quaternion multiplyWithQuaternion(quaternion quat) {
    return new quaternion(OrbitSimulatorJNI.vec_multiplyWithQuaternion(swigCPtr, this, quaternion.getCPtr(quat), quat), true);
  }

  public vec() {
    this(OrbitSimulatorJNI.new_vec(), true);
  }

}
