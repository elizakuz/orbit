/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


    #include "OrbitSimulator.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< PartOfFlightPlan >::const_reference std_vector_Sl_PartOfFlightPlan_Sg__get(std::vector< PartOfFlightPlan > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_PartOfFlightPlan_Sg__set(std::vector< PartOfFlightPlan > *self,int i,std::vector< PartOfFlightPlan >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ReturnValues >::const_reference std_vector_Sl_ReturnValues_Sg__get(std::vector< ReturnValues > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ReturnValues_Sg__set(std::vector< ReturnValues > *self,int i,std::vector< ReturnValues >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_G_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)G;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_EarthMass_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)EarthMass;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_EarthRadius_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)EarthRadius;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ZeroCelsius_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ZeroCelsius;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_AtmosphereBoundary_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)AtmosphereBoundary;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_SeaLevelAirDensity_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)SeaLevelAirDensity;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Rotation *arg1 = (Rotation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rotationAroundX = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Rotation *arg1 = (Rotation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  result = (double) ((arg1)->rotationAroundX);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Rotation *arg1 = (Rotation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rotationAroundY = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Rotation *arg1 = (Rotation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  result = (double) ((arg1)->rotationAroundY);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Rotation *arg1 = (Rotation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rotationAroundZ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_Rotation_1rotationAroundZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Rotation *arg1 = (Rotation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Rotation **)&jarg1; 
  result = (double) ((arg1)->rotationAroundZ);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1Rotation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Rotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Rotation *)new Rotation();
  *(Rotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1Rotation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Rotation *arg1 = (Rotation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Rotation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Position *arg2 = (Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipPosition **)&jarg1; 
  arg2 = *(Position **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipPosition **)&jarg1; 
  result = (Position *)& ((arg1)->position);
  *(Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1orientation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Orient *arg2 = (Orient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipPosition **)&jarg1; 
  arg2 = *(Orient **)&jarg2; 
  if (arg1) (arg1)->orientation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1orientation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Orient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipPosition **)&jarg1; 
  result = (Orient *)& ((arg1)->orientation);
  *(Orient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1speedFirst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  vec *arg2 = (vec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipPosition **)&jarg1; 
  arg2 = *(vec **)&jarg2; 
  if (arg1) (arg1)->speedFirst = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1speedFirst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipPosition **)&jarg1; 
  result = (vec *)& ((arg1)->speedFirst);
  *(vec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1moment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Rotation *arg2 = (Rotation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipPosition **)&jarg1; 
  arg2 = *(Rotation **)&jarg2; 
  if (arg1) (arg1)->moment = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipPosition_1moment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  Rotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipPosition **)&jarg1; 
  result = (Rotation *)& ((arg1)->moment);
  *(Rotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1ShipPosition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ShipPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ShipPosition *)new ShipPosition();
  *(ShipPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1ShipPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShipPosition *arg1 = (ShipPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShipPosition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1delayTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->delayTime = arg2;
}


SWIGEXPORT jint JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1delayTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  result = (int) ((arg1)->delayTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1impulseValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->impulseValue = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1impulseValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  result = (double) ((arg1)->impulseValue);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1rotateValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  Rotation *arg2 = (Rotation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  arg2 = *(Rotation **)&jarg2; 
  if (arg1) (arg1)->rotateValue = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_PartOfFlightPlan_1rotateValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  Rotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  result = (Rotation *)& ((arg1)->rotateValue);
  *(Rotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1PartOfFlightPlan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PartOfFlightPlan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PartOfFlightPlan *)new PartOfFlightPlan();
  *(PartOfFlightPlan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1PartOfFlightPlan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PartOfFlightPlan *arg1 = (PartOfFlightPlan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PartOfFlightPlan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1shipEdgeLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shipEdgeLength = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1shipEdgeLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->shipEdgeLength);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1shipMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->shipMass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1shipMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->shipMass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1fuelMass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fuelMass = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1fuelMass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->fuelMass);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  Rotation *arg2 = (Rotation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = *(Rotation **)&jarg2; 
  if (arg1) (arg1)->maxRotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  Rotation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (Rotation *)& ((arg1)->maxRotation);
  *(Rotation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxFuelUsagePerSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxFuelUsagePerSec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxFuelUsagePerSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->maxFuelUsagePerSec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1impulsePerFuel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->impulsePerFuel = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1impulsePerFuel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->impulsePerFuel);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1flightPlan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  std::vector< PartOfFlightPlan > *arg2 = (std::vector< PartOfFlightPlan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = *(std::vector< PartOfFlightPlan > **)&jarg2; 
  if (arg1) (arg1)->flightPlan = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1flightPlan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  std::vector< PartOfFlightPlan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (std::vector< PartOfFlightPlan > *)& ((arg1)->flightPlan);
  *(std::vector< PartOfFlightPlan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxOverload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxOverload = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxOverload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->maxOverload);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxHeating_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->maxHeating = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_ShipParams_1maxHeating_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ShipParams *arg1 = (ShipParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ShipParams **)&jarg1; 
  result = (double) ((arg1)->maxHeating);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1ShipParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ShipParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ShipParams *)new ShipParams();
  *(ShipParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1ShipParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ShipParams *arg1 = (ShipParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ShipParams **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_Quants_1numberOfQuants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Quants *arg1 = (Quants *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quants **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numberOfQuants = arg2;
}


SWIGEXPORT jint JNICALL Java_orbit_model_OrbitSimulatorJNI_Quants_1numberOfQuants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Quants *arg1 = (Quants *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quants **)&jarg1; 
  result = (int) ((arg1)->numberOfQuants);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_Quants_1quantSizeOfSec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Quants *arg1 = (Quants *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quants **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->quantSizeOfSec = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_Quants_1quantSizeOfSec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Quants *arg1 = (Quants *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quants **)&jarg1; 
  result = (double) ((arg1)->quantSizeOfSec);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1Quants(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Quants *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Quants *)new Quants();
  *(Quants **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1Quants(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Quants *arg1 = (Quants *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Quants **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ReturnValues_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReturnValues *arg1 = (ReturnValues *) 0 ;
  Position *arg2 = (Position *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReturnValues **)&jarg1; 
  arg2 = *(Position **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ReturnValues_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValues *arg1 = (ReturnValues *) 0 ;
  Position *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValues **)&jarg1; 
  result = (Position *)& ((arg1)->position);
  *(Position **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_ReturnValues_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReturnValues *arg1 = (ReturnValues *) 0 ;
  vec *arg2 = (vec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReturnValues **)&jarg1; 
  arg2 = *(vec **)&jarg2; 
  if (arg1) (arg1)->speed = *arg2;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_ReturnValues_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValues *arg1 = (ReturnValues *) 0 ;
  vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValues **)&jarg1; 
  result = (vec *)& ((arg1)->speed);
  *(vec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1ReturnValues(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReturnValues *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnValues *)new ReturnValues();
  *(ReturnValues **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1ReturnValues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReturnValues *arg1 = (ReturnValues *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReturnValues **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_computeFlightPlan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ShipPosition arg1 ;
  ShipParams arg2 ;
  Quants arg3 ;
  ShipPosition *argp1 ;
  ShipParams *argp2 ;
  Quants *argp3 ;
  std::vector< ReturnValues > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(ShipPosition **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ShipPosition");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ShipParams **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ShipParams");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Quants **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Quants");
    return 0;
  }
  arg3 = *argp3; 
  result = computeFlightPlan(arg1,arg2,arg3);
  *(std::vector< ReturnValues > **)&jresult = new std::vector< ReturnValues >((const std::vector< ReturnValues > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vec *arg1 = (vec *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vec *arg1 = (vec *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vec *arg1 = (vec *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  result = (double) ((arg1)->z);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1getScalar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  result = (double)(arg1)->getScalar();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1multiplyWithDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  double arg2 ;
  vec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->multiplyWithDouble(arg2);
  *(vec **)&jresult = new vec((const vec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  quaternion arg2 ;
  quaternion *argp2 ;
  vec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(vec **)&jarg1; 
  argp2 = *(quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null quaternion");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->rotate(arg2);
  *(vec **)&jresult = new vec((const vec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  vec arg2 ;
  vec *argp2 ;
  vec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(vec **)&jarg1; 
  argp2 = *(vec **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null vec");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->multiply(arg2);
  *(vec **)&jresult = new vec((const vec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1createQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vec **)&jarg1; 
  result = (arg1)->createQuaternion();
  *(quaternion **)&jresult = new quaternion((const quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vec_1multiplyWithQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  vec *arg1 = (vec *) 0 ;
  quaternion arg2 ;
  quaternion *argp2 ;
  quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(vec **)&jarg1; 
  argp2 = *(quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null quaternion");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->multiplyWithQuaternion(arg2);
  *(quaternion **)&jresult = new quaternion((const quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  vec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (vec *)new vec();
  *(vec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vec *arg1 = (vec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vec **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quaternion *arg1 = (quaternion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (double) ((arg1)->w);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quaternion *arg1 = (quaternion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quaternion *arg1 = (quaternion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  quaternion *arg1 = (quaternion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jdouble JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (double) ((arg1)->z);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (arg1)->normalize();
  *(quaternion **)&jresult = new quaternion((const quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  quaternion arg2 ;
  quaternion *argp2 ;
  quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(quaternion **)&jarg1; 
  argp2 = *(quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null quaternion");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->multiply(arg2);
  *(quaternion **)&jresult = new quaternion((const quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_quaternion_1invert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  quaternion *arg1 = (quaternion *) 0 ;
  quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(quaternion **)&jarg1; 
  result = (arg1)->invert();
  *(quaternion **)&jresult = new quaternion((const quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1quaternion(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (quaternion *)new quaternion();
  *(quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1quaternion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  quaternion *arg1 = (quaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(quaternion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1vector_1of_1part_1flight_1plan_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< PartOfFlightPlan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< PartOfFlightPlan > *)new std::vector< PartOfFlightPlan >();
  *(std::vector< PartOfFlightPlan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1vector_1of_1part_1flight_1plan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< PartOfFlightPlan >::size_type arg1 ;
  std::vector< PartOfFlightPlan > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< PartOfFlightPlan >::size_type)jarg1; 
  result = (std::vector< PartOfFlightPlan > *)new std::vector< PartOfFlightPlan >(arg1);
  *(std::vector< PartOfFlightPlan > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  std::vector< PartOfFlightPlan >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  result = ((std::vector< PartOfFlightPlan > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  std::vector< PartOfFlightPlan >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  result = ((std::vector< PartOfFlightPlan > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  std::vector< PartOfFlightPlan >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  arg2 = (std::vector< PartOfFlightPlan >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  result = (bool)((std::vector< PartOfFlightPlan > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  std::vector< PartOfFlightPlan >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  arg2 = *(std::vector< PartOfFlightPlan >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PartOfFlightPlan >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< PartOfFlightPlan >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  int arg2 ;
  std::vector< PartOfFlightPlan >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< PartOfFlightPlan >::value_type *) &std_vector_Sl_PartOfFlightPlan_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< PartOfFlightPlan >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1part_1flight_1plan_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  int arg2 ;
  std::vector< PartOfFlightPlan >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< PartOfFlightPlan >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PartOfFlightPlan >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_PartOfFlightPlan_Sg__set(arg1,arg2,(PartOfFlightPlan const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1vector_1of_1part_1flight_1plan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< PartOfFlightPlan > *arg1 = (std::vector< PartOfFlightPlan > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< PartOfFlightPlan > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1vector_1of_1return_1values_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ReturnValues > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ReturnValues > *)new std::vector< ReturnValues >();
  *(std::vector< ReturnValues > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_new_1vector_1of_1return_1values_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ReturnValues >::size_type arg1 ;
  std::vector< ReturnValues > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ReturnValues >::size_type)jarg1; 
  result = (std::vector< ReturnValues > *)new std::vector< ReturnValues >(arg1);
  *(std::vector< ReturnValues > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  std::vector< ReturnValues >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  result = ((std::vector< ReturnValues > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  std::vector< ReturnValues >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  result = ((std::vector< ReturnValues > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  std::vector< ReturnValues >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  arg2 = (std::vector< ReturnValues >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  result = (bool)((std::vector< ReturnValues > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  std::vector< ReturnValues >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  arg2 = *(std::vector< ReturnValues >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ReturnValues >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ReturnValues >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  int arg2 ;
  std::vector< ReturnValues >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ReturnValues >::value_type *) &std_vector_Sl_ReturnValues_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ReturnValues >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_vector_1of_1return_1values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  int arg2 ;
  std::vector< ReturnValues >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ReturnValues >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ReturnValues >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ReturnValues_Sg__set(arg1,arg2,(ReturnValues const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_orbit_model_OrbitSimulatorJNI_delete_1vector_1of_1return_1values(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ReturnValues > *arg1 = (std::vector< ReturnValues > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ReturnValues > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

